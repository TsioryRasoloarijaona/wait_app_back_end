enum ConnectionType {
  pswd
  oauth
}

enum Permissions {
  user
  admin
  superadmin
}

enum requestStatus {
  pending
  approved
  rejected
}

enum WaitingListStatus {
  waiting
  served
  leaved
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String          @unique
  password       String?
  connectionType ConnectionType  @default(pswd)
  permissions    Permissions[]
  WaitingList    WaitingList[]
  Establishment  Establishment[]
  RenderVous     RenderVous[]
}

type generalInfo {
  establishmentName String
  category          String
  averageDuration   Int
}

type geoInfo {
  country String
  city    String
}

type workingDetail {
  day   String
  open  String
  close String
}

type location {
  coord        Float[]
  exactAddress String?
}

type placeInfo {
  geoInfo  geoInfo
  location location
}

type contactInfo {
  email   String
  phone   String
  webSite String?
}

model Establishment {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  adminId       String          @db.ObjectId
  admin         Users           @relation(fields: [adminId], references: [id])
  generalInfo   generalInfo
  placeInfo     placeInfo
  contactInfo   contactInfo
  workingDetail workingDetail[]
  createdAt     DateTime        @default(now())
  status        requestStatus   @default(pending)
  imageUrl      String?
  waitingList   WaitingList[]
  RenderVous    RenderVous[]
}

model WaitingList {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @db.ObjectId
  user              Users             @relation(fields: [userId], references: [id])
  establishmentId   String            @db.ObjectId
  establishment     Establishment     @relation(fields: [establishmentId], references: [id])
  arrivalTime       DateTime          @default(now())
  leavingTime       DateTime?
  waitingListStatus WaitingListStatus @default(waiting)
}

model RenderVous {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userId          String        @db.ObjectId
  user            Users         @relation(fields: [userId], references: [id])
  establishmentId String        @db.ObjectId
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  creationDate    DateTime      @default(now())
  rdvDateTime     DateTime
}
